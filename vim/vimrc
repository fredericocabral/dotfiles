
call pathogen#infect()
call pathogen#helptags()

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'Valloric/YouCompleteMe'
call vundle#end()


" Powerline Setup
" set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9
" set laststatus=2

"set foldmethod=indent
"set foldlevel=99

set number
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber
set tabstop=2
set shiftwidth=2
set expandtab
set ruler
set colorcolumn=80

"version for regex used by vim. 
"For some reasons the recent regex engine slow the vim performance for ruby
set re=1 


filetype on
filetype plugin indent on
filetype plugin on 
filetype indent on
syntax on

" ==========================================================================
" SWAP
" ---------------------------------------------------------------------------
" vim put swap, backup and undo files in a special location instead 
" of the working directory of the file being edited:
" ---------------------------------------------------------------------------
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ==========================================================================
" COLORS
" ---------------------------------------------------------------------------
set cursorline
set cursorcolumn
set background=dark

"colorscheme solarized
"colorscheme sourcerer
colorscheme hybrid
"colorscheme distinguished
"colorscheme grb256
"colorscheme distinguished
"colorscheme railscasts
"colorscheme python
"colorscheme codeschool 
"set guifont=Monaco:h12


" autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

" Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'} 
" Bundle 'alfredodeza/pytest.vim'
" Bundle 'mindriot101/vim-pytest-runner'


"autocmd BufWritePost *.py call Flake8()

" let g:PyFlakeOnWrite = 1



" ------------------------------------------------------
" BASIC KEY MAPS
" -----------------------------------------------------
" Clipboard register
map <leader>y "*y
map <leader>p "*p

" move around splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"NerdTree
map <C-n> :NERDTreeToggle<CR>

"Ack Search"
nmap <leader>a <Esc>:Ack!

" Close all other windows, open a vertical split, and open this file's test
" alternate in it.
nnoremap <leader>s :call FocusOnFile()<cr>
function! FocusOnFile()
  tabnew %
  normal! v
  normal! l
  call OpenTestAlternate()
  normal! h
endfunction

" ------------------------------------------------------
" RUN THE CURRENT FILE (PYTHON|RUBY|SHELL)
" -----------------------------------------------------
nnoremap <leader>e :call ExecuteFile()<cr>
function! ExecuteFile()
  if &filetype=='python'
    !python %
  elseif &filetype=='sh'
    !./%
  elseif &filetype=='ruby'
    echo "Ruby runner not implemented"
  endif
endfunction


function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':e ' . new_file
endfunction
function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction
nnoremap <leader>. :call OpenTestAlternate()<cr>

" Pytest
"nmap <silent><Leader>f <Esc>:Pytest file<CR>
"nmap <silent><Leader>c <Esc>:Pytest class<CR>
"nmap <silent><Leader>m <Esc>:Pytest method<CR>
"" cycle through test errors
"nmap <silent><Leader>tn <Esc>:Pytest next<CR>
"nmap <silent><Leader>tp <Esc>:Pytest previous<CR>
"nmap <silent><Leader>te <Esc>:Pytest error<CR>

"map <Leader>t :call RunCurrentTestFile()<CR>
"map <Leader>s :call RunNearestTest()<CR>
"map <Leader>l :call RunLastTest()<CR>
"map <Leader>a :call RunAllTests()<CR>


" ------------------------------------------------------
" VROOM PLUGIN CONFIG
" -----------------------------------------------------
" Map default keys to run tests (Default 1)
let g:vroom_map_keys = 0 
nnoremap <leader>t :VroomRunTestFile<cr>
nnoremap <leader>T :VroomRunNearestTest<cr>
nnoremap <leader>l :VroomRunLastTest<cr>

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF



" Find and Replace
vnoremap <silent> s //e<C-r>=&selection=='exclusive'?'+1':''<CR><CR>
    \:<C-u>call histdel('search',-1)<Bar>let @/=histget('search',-1)<CR>gv
omap s :normal vs<CR>


"au WinLeave * set nocursorline nocursorcolumn
"au WinEnter * set cursorline cursorcolumn
"set cursorline cursorcolumn

set runtimepath^=~/.vim/bundle/ctrlp.vim

let ropevim_vim_completion=0
let ropevim_extended_complete=0

let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>re"
let g:jedi#use_tabs_not_buffers = 1


function! s:Highlight_Matching_Pair()
endfunction
