call pathogen#infect()
call pathogen#helptags()

set number
"autocmd InsertEnter * :set number
"autocmd InsertLeave * :set relativenumber
set tabstop=2
set shiftwidth=2
set expandtab
set ruler
set colorcolumn=80

filetype on
filetype plugin indent on
filetype plugin on 
filetype indent on
syntax on

autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4

" ==========================================================================
" Version for regex used by vim. For some reasons the recent regex 
" engine slow the vim performance for ruby
" ---------------------------------------------------------------------------
set re=1 

" ==========================================================================
" SWAP
" ---------------------------------------------------------------------------
" vim put swap, backup and undo files in a special location instead 
" of the working directory of the file being edited:
" ---------------------------------------------------------------------------
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ===========================================================================
" COLORS
" ---------------------------------------------------------------------------
set cursorline
set cursorcolumn
set background=dark

"colorscheme solarized
"colorscheme sourcerer
colorscheme hybrid
"colorscheme distinguished
"colorscheme grb256
"colorscheme distinguished
"colorscheme railscasts
"colorscheme python
"colorscheme codeschool 
"set guifont=Monaco:h12


" ===========================================================================
" BASIC KEY MAPS
" ---------------------------------------------------------------------------
" Clipboard register
map <leader>y "*y
map <leader>p "*p

" move around splits
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

"NerdTree
map <C-n> :NERDTreeToggle<CR>

"Ack Search"
nmap <leader>f <Esc>:Ack!

" ===========================================================================
" RUN THE CURRENT FILE (PYTHON|RUBY|SHELL)
" ---------------------------------------------------------------------------
nnoremap <leader>e :call ExecuteFile()<cr>
function! ExecuteFile()
  if &filetype=='python'
    !python %
  elseif &filetype=='sh'
    !./%
  elseif &filetype=='ruby'
    echo "TODO: Ruby runner not implemented"
  endif
endfunction


" ===========================================================================
" OPEN THE RSPEC FILE OF A GIVEN RUBY FILE(CONTROLLER, MODEL, ETC)
" ---------------------------------------------------------------------------
nnoremap <leader>a :call OpenTestAlternate()<cr>
function! OpenTestAlternate()
  let new_file = AlternateForCurrentFile()
  exec ':vsplit ' . new_file
endfunction

" Close all other windows, open a vertical split, and open this file's test
" alternate in it.
" nnoremap <leader>s :call FocusOnFile()<cr>
function! FocusOnFile()
  tabnew %
  normal! v
  normal! l
  call OpenTestAlternate()
  normal! h
endfunction

function! AlternateForCurrentFile()
  let current_file = expand("%")
  let new_file = current_file
  let in_spec = match(current_file, '^spec/') != -1
  let going_to_spec = !in_spec
  let in_app = match(current_file, '\<controllers\>') != -1 || match(current_file, '\<models\>') != -1 || match(current_file, '\<views\>') != -1 || match(current_file, '\<helpers\>') != -1
  if going_to_spec
    if in_app
      let new_file = substitute(new_file, '^app/', '', '')
    end
    let new_file = substitute(new_file, '\.e\?rb$', '_spec.rb', '')
    let new_file = 'spec/' . new_file
  else
    let new_file = substitute(new_file, '_spec\.rb$', '.rb', '')
    let new_file = substitute(new_file, '^spec/', '', '')
    if in_app
      let new_file = 'app/' . new_file
    end
  endif
  return new_file
endfunction

" ------------------------------------------------------
" VROOM PLUGIN CONFIG
" -----------------------------------------------------
" Map default keys to run tests (Default 1)
let g:vroom_map_keys = 0 
nnoremap <leader>t :VroomRunTestFile<cr>
nnoremap <leader>T :VroomRunNearestTest<cr>
nnoremap <leader>l :VroomRunLastTest<cr>

" Add the virtualenv's site-packages to vim path
py << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, project_base_dir)
    activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
    execfile(activate_this, dict(__file__=activate_this))
EOF

set runtimepath^=~/.vim/bundle/ctrlp.vim

let ropevim_vim_completion=0
let ropevim_extended_complete=0

let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>re"
let g:jedi#use_tabs_not_buffers = 1
